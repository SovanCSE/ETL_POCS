
---> Create a new database SAMPLE_DB
CREATE DATABASE IF NOT EXISTS SAMPLE_DB;

---> Select the newly created SAMPLE_DB database
USE DATABASE SAMPLE_DB;

---> Create new schema SAMPLE_SCHEMA under SAMPLE_DB database
CREATE SCHEMA IF NOT EXISTS SAMPLE_SCHEMA;

---> USE SCHEMA SAMPLE_SCHEMA
USE SCHEMA SAMPLE_SCHEMA;

---> Create new table USER_POSTS_RAW_DATA to store user posts raw json data
CREATE OR REPLACE TABLE USER_POSTS_RAW_DATA (
    UNIQUE_NUMBER NUMBER(38,0) AUTOINCREMENT,
    JSON_PAYLOAD VARIANT,
    INSERT_TS TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


---> FETCH DATA FROM TABLE 
SELECT * FROM USER_POSTS_RAW_DATA; 

---> CREATE STREAM TOP OF THE RAW TABLE
CREATE OR REPLACE STREAM USER_POSTS_RAW_DATA_STREAM
ON TABLE USER_POSTS_RAW_DATA;

SELECT * FROM USER_POSTS_RAW_DATA_STREAM; 


CREATE OR REPLACE PROCEDURE USER_POST_ETL()
  RETURNS STRING
  LANGUAGE JAVASCRIPT
  EXECUTE AS CALLER
AS
$$
  
  // SET DATABASE
  snowflake.execute({sqlText: `USE DATABASE SAMPLE_DB;`});

  // SET SCHEMA
  snowflake.execute({sqlText: `USE SCHEMA SAMPLE_SCHEMA;`});

  // CREATE TARGET TABLE IF NOT EXISTS  `
  snowflake.execute({sqlText: 
  `
  CREATE TABLE IF NOT EXISTS USER_POST_TARGET (
  USER_ID VARCHAR,
  POST_ID VARCHAR,
  POST_MESSAGE VARCHAR,
  VENDOR_DATE TIMESTAMP_NTZ(9),
  SOURCE_PAYLOAD VARIANT,
  CURRENT_FLAG VARCHAR(1),
  END_DATE DATE 9999-12-12  VENDOR_DATE
  );
  `
  });

  // CREATE FLATTERN SOURCE TABLE FROM STREAM
  snowflake.execute({sqlText:
  `
  CREATE OR REPLACE TEMPORARY TABLE FLATTEN_USER_POSTS
    AS
    (
       SELECT 
        FLATTENED.value:userId as USER_ID,
        FLATTENED.value:id as POST_ID,
        FLATTENED.value:body as POST_MESSAGE,
        TO_DATE(INSERT_TS) as VENDOR_DATE,
        FLATTENED.value as SOURCE_PAYLOAD
    FROM  USER_POSTS_RAW_DATA_STREAM,
    LATERAL FLATTEN(INPUT => JSON_PAYLOAD) AS FLATTENED
    ORDER BY USER_ID, POST_ID
    );
    `
   })

 // UPDATE FOR EXISTING USER's POST CHANGES
 snowflake.execute({sqlText: 
  `
  UPDATE USER_POST_TARGET T
    SET
      T.END_DATE = CURRENT_TIMESTAMP(),
      T.CURRENT_FLAG = 'N'
    FROM 
      FLATTEN_USER_POSTS S
    JOIN
      USER_POST_TARGET TT
    ON  
       TT.USER_ID = S.USER_ID
    AND
       TT.CURRENT_FLAG = 'Y'
  ;
 `
 })

//INSER FOR EXISTING USER'S POST CHANGES
snowflake.execute({sqlText: 
`
  INSERT INTO USER_POST_TARGET 
(
SELECT
  S.USER_ID,
  S.POST_ID,
  S.POST_MESSAGE,
  S.VENDOR_DATE,
  S.SOURCE_PAYLOAD,
  'Y' AS CURRENT_FLAG,
  '9999-12-12' AS END_DATE,
FROM 
FLATTEN_USER_POSTS S
JOIN
USER_POST_TARGET T
ON
    S.USER_ID = T.USER_ID
WHERE
    S.POST_ID  = T.POST_ID
AND 
    S.POST_MESSAGE <> T.POST_MESSAGE
);
`
})

// INSERT FOR BRAND NEW USER AND POSTS
snowflake.execute({sqlText: 
`
INSERT INTO USER_POST_TARGET
(
SELECT 
 S.USER_ID,
 S.POST_ID,
 S.POST_MESSAGE,
 S.VENDOR_DATE,
 S.SOURCE_PAYLOAD,
 LEAD('N', 1,'Y') OVER(PARTITION BY S.USER_ID ORDER BY S.USER_ID, S.POST_ID) AS CURRENT_FLAG,
 LEAD(S.VENDOR_DATE, 1,'9999-12-12') OVER(PARTITION BY S.USER_ID ORDER BY S.USER_ID, S.POST_ID) AS END_DATE
FROM USER_POST_TARGET T RIGHT JOIN FLATTEN_USER_POSTS S
ON
    T.USER_ID = S.USER_ID
AND 
     T.POST_ID = S.POST_ID
WHERE   
    T.USER_ID IS NULL
ORDER BY  S.USER_ID, S.POST_ID
)
;
`})

  
// Define your JavaScript logic here
var result = "ETL Operation got completed successfully!";
return result;
  
$$;

CALL USER_POST_ETL();


CREATE OR REPLACE TASK USER_POST_ETL_TASK
  WAREHOUSE = COMPUTE_WH
  SCHEDULE = '5 MINUTE'
WHEN 
  SYSTEM$STREAM_HAS_DATA('SAMPLE_DB.SAMPLE_SCHEMA.USER_POSTS_RAW_DATA_STREAM')
AS
CALL USER_POST_ETL()
;

-- START THE TASK
ALTER TASK USER_POST_ETL_TASK RESUME;

-- STOP THE TASK
ALTER TASK USER_POST_ETL_TASK SUSPEND;

-- TASK HISTORY
SELECT STATE, * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(TASK_NAME=>'USER_POST_ETL_TASK'));
